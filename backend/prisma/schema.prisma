generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  avatar    String?
  latitude  Float?
  longitude Float?
  city      String?
  country   String?
  status    String   @default("offline") // online, offline, busy
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sentMessages     Message[] @relation("MessageSender")
  chatParticipants ChatParticipant[]
  intents          Intent[]

  @@map("users")
}

model Chat {
  id           String   @id @default(cuid())
  name         String?
  mode         String   @default("researcher") // researcher, creator, analyst
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  messages     Message[]
  participants ChatParticipant[]

  @@map("chats")
}

model ChatParticipant {
  id     String @id @default(cuid())
  userId String
  chatId String
  role   String @default("member") // admin, member

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // text, image, file, system
  senderId  String
  chatId    String
  metadata  String? // JSON string for additional data
  createdAt DateTime @default(now())

  // Relations
  sender User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Intent {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // offer, request
  category    String
  location    String?
  userId      String
  status      String   @default("active") // active, completed, cancelled
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("intents")
}

model AilockSession {
  id           String   @id @default(cuid())
  userId       String
  mode         String   @default("researcher")
  location     String? // JSON string
  contextData  String? // JSON string for context actions and state
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ailock_sessions")
}