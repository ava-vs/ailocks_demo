generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  status    String   @default("offline")
  latitude  Float?
  longitude Float?
  city      String?
  country   String?
  createdAt DateTime @default(now())

  ailockSessions   AilockSession[]
  chatSessions     ChatSession[]
  ailocks          Ailock[]
  intents          Intent[]
  chatParticipants ChatParticipant[]
  messages         Message[]
}

// Ailock Agent
model Ailock {
  id        String   @id @default(cuid())
  name      String
  mode      String   @default("creator") // researcher, creator, analyst
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
}

// Ailock sessions for tracking active interactions
model AilockSession {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  mode         String   @default("researcher")
  location     String?
  contextData  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
}

// Chat management
model Chat {
  id           String   @id @default(cuid())
  name         String?
  mode         String   @default("researcher")
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
  role   String @default("member") // admin, member

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // text, image, file, system
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  metadata  String? // JSON string
  createdAt DateTime @default(now())
}

// Chat sessions (legacy - keeping for compatibility)
model ChatSession {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  ailockMode   String   @default("creator")
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  messages ChatMessage[]
  intents  Intent[]
}

model ChatMessage {
  id        String      @id @default(cuid())
  session   ChatSession @relation(fields: [sessionId], references: [id])
  sessionId String
  sender    String // 'user' or 'ailock'
  content   String
  timestamp DateTime    @default(now())
}

// Core business entities
model Intent {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  session     ChatSession? @relation(fields: [sessionId], references: [id])
  sessionId   String?
  title       String
  description String
  type        String       @default("request") // offer, request
  category    String
  location    String?
  status      String       @default("draft") // draft, active, matched, completed, cancelled
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
}